// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MileStone.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MileStone.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20220925120407_IntialCreate")]
    partial class IntialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MileStone.Models.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessCaseID")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Document")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("PhysicalPath")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("RelatedItemType")
                        .HasColumnType("text");

                    b.Property<Guid>("RelatedItemUID")
                        .HasColumnType("uuid");

                    b.HasKey("AttachmentUID");

                    b.HasIndex("BusinessCaseID");

                    b.HasIndex("ProjectCharterId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("MileStone.Models.BeneficiariesandStakeholders", b =>
                {
                    b.Property<Guid>("BeneficiariesandStakeholdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessCaseId")
                        .HasColumnType("uuid");

                    b.Property<string>("CommunicationTools")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("Expectations")
                        .HasColumnType("text");

                    b.Property<string>("LevelOfImpact")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("BeneficiariesandStakeholdersId");

                    b.HasIndex("BusinessCaseId");

                    b.HasIndex("ProjectCharterId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("BeneficiariesandStakeholders");
                });

            modelBuilder.Entity("MileStone.Models.BenefitRealizationPlan", b =>
                {
                    b.Property<Guid>("BenefitRealizationPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DescriptionOfBenefits")
                        .HasColumnType("text");

                    b.Property<string>("InvestigatorRatio")
                        .HasColumnType("text");

                    b.Property<string>("Observations")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("RelatedOutputs")
                        .HasColumnType("text");

                    b.Property<string>("Responsible")
                        .HasColumnType("text");

                    b.Property<string>("Target")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("BenefitRealizationPlanId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("BenefitRealizationPlans");
                });

            modelBuilder.Entity("MileStone.Models.BusinessCase", b =>
                {
                    b.Property<Guid>("BusinessCaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssociatedBudgetLineItem")
                        .HasColumnType("text");

                    b.Property<int>("AssociatedBudgetLineItemNumber")
                        .HasColumnType("integer");

                    b.Property<string>("AssociatedStrategicObjectives")
                        .HasColumnType("text");

                    b.Property<string>("BusinessCaseDescription")
                        .HasColumnType("text");

                    b.Property<string>("BusinessCaseIdea")
                        .HasColumnType("text");

                    b.Property<string>("BusinessCaseImplementationMechanismProjectExecution")
                        .HasColumnType("text");

                    b.Property<string>("BusinessCaseJustification")
                        .HasColumnType("text");

                    b.Property<string>("BusinessCaseName")
                        .HasColumnType("text");

                    b.Property<string>("CadresRequiredForTheProjectResources")
                        .HasColumnType("text");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("EstimatedBudget")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ExpectedDuration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("ExpectedInvestmentValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("FinalValueOfInvestmentInRiyals")
                        .HasColumnType("numeric");

                    b.Property<string>("ImplementationObjectives")
                        .HasColumnType("text");

                    b.Property<string>("Importance")
                        .HasColumnType("text");

                    b.Property<decimal>("PaybackPeriodInMonths")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReturnOnInvestmentROI")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("SectorID")
                        .HasColumnType("uuid");

                    b.Property<string>("TheExistenceOfTheRFPReadiness")
                        .HasColumnType("text");

                    b.HasKey("BusinessCaseID");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SectorID");

                    b.ToTable("BusinessCases");
                });

            modelBuilder.Entity("MileStone.Models.BusinessCaseWithProjects", b =>
                {
                    b.Property<Guid>("BusienssCaseID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uuid");

                    b.HasKey("BusienssCaseID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("BusinessCaseWithProjects");
                });

            modelBuilder.Entity("MileStone.Models.Comments", b =>
                {
                    b.Property<Guid>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessCaseID")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("CommentsId");

                    b.HasIndex("BusinessCaseID");

                    b.HasIndex("ProjectCharterId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MileStone.Models.CommunicationPlan", b =>
                {
                    b.Property<Guid>("CommunicationPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommunicationTiming")
                        .HasColumnType("text");

                    b.Property<string>("ConcernedParty")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Observations")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("CommunicationPlanId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("CommunicationPlans");
                });

            modelBuilder.Entity("MileStone.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MileStone.Models.ImplementationTimeline", b =>
                {
                    b.Property<Guid>("ImplementationTimelineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityName")
                        .HasColumnType("text");

                    b.Property<string>("DurationOfActivity")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reliability")
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ImplementationTimelineId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("ImplementationTimeline");
                });

            modelBuilder.Entity("MileStone.Models.LimitationsAndAssumptions", b =>
                {
                    b.Property<Guid>("LimitationsAndAssumptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImpactOnProjectOutputs")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.HasKey("LimitationsAndAssumptionsId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("LimitationsAndAssumptions");
                });

            modelBuilder.Entity("MileStone.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MileStone.Models.ProjectCashFlow", b =>
                {
                    b.Property<Guid>("ProjectCashFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusinessCaseId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("ProjectCashFlowId");

                    b.HasIndex("BusinessCaseId");

                    b.ToTable("ProjectCashFlows");
                });

            modelBuilder.Entity("MileStone.Models.ProjectCharter", b =>
                {
                    b.Property<Guid>("ProjectCharterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalOfContracts")
                        .HasColumnType("text");

                    b.Property<string>("ApproveChangeOrders")
                        .HasColumnType("text");

                    b.Property<decimal>("ApprovedBudget")
                        .HasColumnType("numeric");

                    b.Property<string>("Assumptions")
                        .HasColumnType("text");

                    b.Property<string>("CheckTheQualityOfTheOutput")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaForMeasuringTheAchievementOfBenefitsRealizationIndicators")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaForMeasuringreturnOnInvestmentROIIndicators")
                        .HasColumnType("text");

                    b.Property<string>("Dependencies")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImplementingEntityCompanyName")
                        .HasColumnType("text");

                    b.Property<string>("InScope")
                        .HasColumnType("text");

                    b.Property<string>("KeySuccessFactors")
                        .HasColumnType("text");

                    b.Property<string>("ListOfFutilityOfCompletingTheProject")
                        .HasColumnType("text");

                    b.Property<string>("NameOftheCriterion")
                        .HasColumnType("text");

                    b.Property<string>("OutOfWork")
                        .HasColumnType("text");

                    b.Property<string>("OutputAccreditation")
                        .HasColumnType("text");

                    b.Property<string>("PerformanceMeasurementStandard_CriteriaKeyPerformanceIndicators")
                        .HasColumnType("text");

                    b.Property<string>("ProjectBenefits")
                        .HasColumnType("text");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectDeliverables")
                        .HasColumnType("text");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProjectDuration")
                        .HasColumnType("text");

                    b.Property<string>("ProjectLimitations")
                        .HasColumnType("text");

                    b.Property<string>("ProjectLocation")
                        .HasColumnType("text");

                    b.Property<string>("ProjectManagerName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectObjectives")
                        .HasColumnType("text");

                    b.Property<string>("ProjectPurchasesProcurement")
                        .HasColumnType("text");

                    b.Property<string>("ProjectSponsor")
                        .HasColumnType("text");

                    b.Property<string>("QualityMeasurementStandardsKeyQualityIndicators")
                        .HasColumnType("text");

                    b.Property<string>("RecruitmentOfCadres")
                        .HasColumnType("text");

                    b.Property<decimal>("ReturnOnInvestment")
                        .HasColumnType("numeric");

                    b.Property<string>("RiskMeasurementCriteriaKeyRisksIndicators")
                        .HasColumnType("text");

                    b.Property<Guid?>("SectorID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ValidityName")
                        .HasColumnType("text");

                    b.HasKey("ProjectCharterId");

                    b.HasIndex("SectorID");

                    b.ToTable("ProjectCharters");
                });

            modelBuilder.Entity("MileStone.Models.ProjectManagementPlan", b =>
                {
                    b.Property<Guid>("ProjectManagementPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ApprovedProjectBudget")
                        .HasColumnType("numeric");

                    b.Property<string>("BenefitsRealizationIndicators")
                        .HasColumnType("text");

                    b.Property<string>("CheckTheQualityOfTheOutput")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Deliverables")
                        .HasColumnType("text");

                    b.Property<string>("Dependencies")
                        .HasColumnType("text");

                    b.Property<string>("KeyPerformanceIndicators")
                        .HasColumnType("text");

                    b.Property<string>("KeyQualityIndicators")
                        .HasColumnType("text");

                    b.Property<string>("KeyRisksIndicators")
                        .HasColumnType("text");

                    b.Property<string>("KeySuccessFactors")
                        .HasColumnType("text");

                    b.Property<string>("ListOfFutilityOfCompletingTheProject")
                        .HasColumnType("text");

                    b.Property<string>("NameOftheCriterion")
                        .HasColumnType("text");

                    b.Property<DateTime>("PlannedFinishDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Procurement")
                        .HasColumnType("text");

                    b.Property<int>("ProjectCode")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProjectDuration")
                        .HasColumnType("text");

                    b.Property<string>("ProjectLocation")
                        .HasColumnType("text");

                    b.Property<string>("ProjectManagementPlanName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectObjectives")
                        .HasColumnType("text");

                    b.Property<string>("ProjectSponsor")
                        .HasColumnType("text");

                    b.Property<string>("ROIIndicators")
                        .HasColumnType("text");

                    b.Property<decimal>("ReturnOnInvestment")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("SectorID")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectManagementPlanId");

                    b.HasIndex("SectorID");

                    b.ToTable("ProjectManagementPlans");
                });

            modelBuilder.Entity("MileStone.Models.ProjectOutputsAndCost", b =>
                {
                    b.Property<Guid?>("ProjectOutputsAndCostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("DescriptionOfTheScopeOfWork")
                        .HasColumnType("text");

                    b.Property<string>("MainMileStone")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.HasKey("ProjectOutputsAndCostId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("ProjectOutputsAndCosts");
                });

            modelBuilder.Entity("MileStone.Models.ProjectRolesAndResources", b =>
                {
                    b.Property<Guid>("ProjectRolesandResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommunicationTools")
                        .HasColumnType("text");

                    b.Property<string>("Impact")
                        .HasColumnType("text");

                    b.Property<string>("NameOfThePerson")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("ProjectRolesandResourcesId");

                    b.HasIndex("ProjectCharterId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("ProjectRolesAndResources");
                });

            modelBuilder.Entity("MileStone.Models.ResourceAndCadreManagement", b =>
                {
                    b.Property<Guid>("ResourceAndCadreManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activities")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExperienceLevel")
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Management")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ResourceAndCadreManagementId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("ResourceAndCadreManagement");
                });

            modelBuilder.Entity("MileStone.Models.Risk", b =>
                {
                    b.Property<Guid>("RiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Administrator")
                        .HasColumnType("text");

                    b.Property<Guid?>("BusinessCaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateClose")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOccurred")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Impact")
                        .HasColumnType("text");

                    b.Property<string>("IntialDispostion")
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("RiskStatus")
                        .HasColumnType("text");

                    b.Property<string>("RiskTitle")
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .HasColumnType("text");

                    b.HasKey("RiskId");

                    b.HasIndex("BusinessCaseId");

                    b.HasIndex("ProjectCharterId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("Risks");
                });

            modelBuilder.Entity("MileStone.Models.Sector", b =>
                {
                    b.Property<Guid>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SectorName")
                        .HasColumnType("text");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("MileStone.Models.StrategicObjectives", b =>
                {
                    b.Property<Guid>("StrategicObjectivesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Goal")
                        .HasColumnType("text");

                    b.Property<string>("LevelOfImpact")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectCharterId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectManagementPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("StrategicObjectivesId");

                    b.HasIndex("ProjectCharterId");

                    b.HasIndex("ProjectManagementPlanId");

                    b.ToTable("StrategicObjectives");
                });

            modelBuilder.Entity("MileStone.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("ContractRenewalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IqamaExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("PassportExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MileStone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MileStone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MileStone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MileStone.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MileStone.Models.Attachment", b =>
                {
                    b.HasOne("MileStone.Models.BusinessCase", null)
                        .WithMany("Attachments")
                        .HasForeignKey("BusinessCaseID");

                    b.HasOne("MileStone.Models.ProjectCharter", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectCharterId");

                    b.HasOne("MileStone.Models.ProjectManagementPlan", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ProjectManagementPlanId");
                });

            modelBuilder.Entity("MileStone.Models.BeneficiariesandStakeholders", b =>
                {
                    b.HasOne("MileStone.Models.BusinessCase", "BusinessCase")
                        .WithMany("BeneficiariesandStakeholders")
                        .HasForeignKey("BusinessCaseId");

                    b.HasOne("MileStone.Models.ProjectCharter", "ProjectCharter")
                        .WithMany("BeneficiariesandStakeholders")
                        .HasForeignKey("ProjectCharterId");

                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("BeneficiariesandStakeholders")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("BusinessCase");

                    b.Navigation("ProjectCharter");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.BenefitRealizationPlan", b =>
                {
                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("BenefitRealizationPlans")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.BusinessCase", b =>
                {
                    b.HasOne("MileStone.Models.Department", "Department")
                        .WithMany("BusinessCases")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("MileStone.Models.Sector", "Sector")
                        .WithMany("BusinessCases")
                        .HasForeignKey("SectorID");

                    b.Navigation("Department");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("MileStone.Models.BusinessCaseWithProjects", b =>
                {
                    b.HasOne("MileStone.Models.BusinessCase", "BusinessCase")
                        .WithMany("BusinessCasesWihtProjects")
                        .HasForeignKey("BusienssCaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MileStone.Models.Project", "Project")
                        .WithMany("BusinessCasesWihtProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessCase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MileStone.Models.Comments", b =>
                {
                    b.HasOne("MileStone.Models.BusinessCase", "BusinessCase")
                        .WithMany("Comments")
                        .HasForeignKey("BusinessCaseID");

                    b.HasOne("MileStone.Models.ProjectCharter", "ProjectCharter")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectCharterId");

                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("BusinessCase");

                    b.Navigation("ProjectCharter");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.CommunicationPlan", b =>
                {
                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("CommunicationPlans")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.ImplementationTimeline", b =>
                {
                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("ImplementationTimelines")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.LimitationsAndAssumptions", b =>
                {
                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("LimitationsAndAssumptions")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.ProjectCashFlow", b =>
                {
                    b.HasOne("MileStone.Models.BusinessCase", "BusinessCase")
                        .WithMany("ProjectCashFlows")
                        .HasForeignKey("BusinessCaseId");

                    b.Navigation("BusinessCase");
                });

            modelBuilder.Entity("MileStone.Models.ProjectCharter", b =>
                {
                    b.HasOne("MileStone.Models.Sector", "Sector")
                        .WithMany("ProjectCharter")
                        .HasForeignKey("SectorID");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("MileStone.Models.ProjectManagementPlan", b =>
                {
                    b.HasOne("MileStone.Models.Sector", "Sector")
                        .WithMany("ProjectManagementPlan")
                        .HasForeignKey("SectorID");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("MileStone.Models.ProjectOutputsAndCost", b =>
                {
                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("ProjectOutputsAndCosts")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.ProjectRolesAndResources", b =>
                {
                    b.HasOne("MileStone.Models.ProjectCharter", "ProjectCharter")
                        .WithMany("ProjectRolesAndResources")
                        .HasForeignKey("ProjectCharterId");

                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("ProjectRolesAndResources")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectCharter");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.ResourceAndCadreManagement", b =>
                {
                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("ResourceAndCadreManagement")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.Risk", b =>
                {
                    b.HasOne("MileStone.Models.BusinessCase", "BusinessCase")
                        .WithMany("Risks")
                        .HasForeignKey("BusinessCaseId");

                    b.HasOne("MileStone.Models.ProjectCharter", "ProjectCharter")
                        .WithMany("Risks")
                        .HasForeignKey("ProjectCharterId");

                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("Risks")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("BusinessCase");

                    b.Navigation("ProjectCharter");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.StrategicObjectives", b =>
                {
                    b.HasOne("MileStone.Models.ProjectCharter", "ProjectCharter")
                        .WithMany("StrategicObjectives")
                        .HasForeignKey("ProjectCharterId");

                    b.HasOne("MileStone.Models.ProjectManagementPlan", "ProjectManagementPlan")
                        .WithMany("StrategicObjectsives")
                        .HasForeignKey("ProjectManagementPlanId");

                    b.Navigation("ProjectCharter");

                    b.Navigation("ProjectManagementPlan");
                });

            modelBuilder.Entity("MileStone.Models.BusinessCase", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BeneficiariesandStakeholders");

                    b.Navigation("BusinessCasesWihtProjects");

                    b.Navigation("Comments");

                    b.Navigation("ProjectCashFlows");

                    b.Navigation("Risks");
                });

            modelBuilder.Entity("MileStone.Models.Department", b =>
                {
                    b.Navigation("BusinessCases");
                });

            modelBuilder.Entity("MileStone.Models.Project", b =>
                {
                    b.Navigation("BusinessCasesWihtProjects");
                });

            modelBuilder.Entity("MileStone.Models.ProjectCharter", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BeneficiariesandStakeholders");

                    b.Navigation("Comments");

                    b.Navigation("ProjectRolesAndResources");

                    b.Navigation("Risks");

                    b.Navigation("StrategicObjectives");
                });

            modelBuilder.Entity("MileStone.Models.ProjectManagementPlan", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BeneficiariesandStakeholders");

                    b.Navigation("BenefitRealizationPlans");

                    b.Navigation("Comments");

                    b.Navigation("CommunicationPlans");

                    b.Navigation("ImplementationTimelines");

                    b.Navigation("LimitationsAndAssumptions");

                    b.Navigation("ProjectOutputsAndCosts");

                    b.Navigation("ProjectRolesAndResources");

                    b.Navigation("ResourceAndCadreManagement");

                    b.Navigation("Risks");

                    b.Navigation("StrategicObjectsives");
                });

            modelBuilder.Entity("MileStone.Models.Sector", b =>
                {
                    b.Navigation("BusinessCases");

                    b.Navigation("ProjectCharter");

                    b.Navigation("ProjectManagementPlan");
                });
#pragma warning restore 612, 618
        }
    }
}
